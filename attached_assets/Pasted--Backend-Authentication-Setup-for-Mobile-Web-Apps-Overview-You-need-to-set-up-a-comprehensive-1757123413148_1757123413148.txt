# Backend Authentication Setup for Mobile & Web Apps

## Overview
You need to set up a comprehensive authentication system that handles both mobile app and web app logins with proper redirects based on the source platform.

## Current Setup
- **Mobile App Domain**: `https://095b9124-ae0d-4cdf-a44b-bdc917e288fa-00-1yfsp5ge10rpv.picard.replit.dev/`
- **Web App Domain**: `ascended.social` (production) or your dev domain
- **Mobile Deep Link Scheme**: `ascended://auth/callback`

## Required Backend Changes

### 1. Update Mobile Login Endpoint (`/api/auth/mobile-login`)

**Current Issue**: The endpoint redirects to `ascended://auth/callback` which causes 404 in web browsers.

**Required Fix**: Detect the platform and redirect accordingly:

```javascript
// GET /api/auth/mobile-login
app.get('/api/auth/mobile-login', (req, res) => {
  const { redirect_uri, platform } = req.query;
  
  // Determine the correct callback URL based on platform
  let callbackUrl;
  
  if (platform === 'native' || redirect_uri?.includes('ascended://')) {
    // Mobile app - use deep link
    callbackUrl = 'ascended://auth/callback';
  } else if (redirect_uri?.includes('replit.dev')) {
    // Web app on Replit dev domain - redirect back to web app
    callbackUrl = `${redirect_uri}/auth/callback`;
  } else if (redirect_uri?.includes('ascended.social')) {
    // Web app on production domain - redirect back to web app
    callbackUrl = `${redirect_uri}/auth/callback`;
  } else {
    // Default fallback - use the provided redirect_uri
    callbackUrl = redirect_uri || 'ascended://auth/callback';
  }
  
  console.log('🔗 Mobile login redirect:', {
    platform,
    originalRedirect: redirect_uri,
    finalCallback: callbackUrl
  });
  
  // Redirect to Replit Auth with the correct callback
  const replitAuthUrl = `https://replit.com/oauth/authorize?client_id=${REPLIT_CLIENT_ID}&redirect_uri=${encodeURIComponent(callbackUrl)}&scope=identity`;
  res.redirect(replitAuthUrl);
});
```

### 2. Update Mobile Config Endpoint (`/api/auth/mobile-config`)

**Current Issue**: Returns 404, causing mobile app to use fallback config.

**Required Implementation**:

```javascript
// GET /api/auth/mobile-config
app.get('/api/auth/mobile-config', (req, res) => {
  try {
    const config = {
      replitClientId: process.env.REPLIT_CLIENT_ID,
      backendDomain: process.env.BACKEND_DOMAIN || 'your-backend-domain.replit.dev',
      webAppDomain: process.env.WEB_APP_DOMAIN || 'ascended.social',
      mobileAppDomain: process.env.MOBILE_APP_DOMAIN || 'https://095b9124-ae0d-4cdf-a44b-bdc917e288fa-00-1yfsp5ge10rpv.picard.replit.dev',
      deepLinkScheme: 'ascended://',
      version: '1.0.0',
      features: {
        deepLinking: true,
        webFallback: true,
        tokenRefresh: true
      }
    };
    
    console.log('📱 Mobile config requested:', config);
    res.json(config);
  } catch (error) {
    console.error('❌ Mobile config error:', error);
    res.status(500).json({ error: 'Failed to get mobile config' });
  }
});

// Health check for mobile config
app.get('/api/auth/mobile-config/health', (req, res) => {
  res.json({ 
    status: 'healthy', 
    timestamp: new Date().toISOString(),
    service: 'mobile-auth-config'
  });
});
```

### 3. Update Token Verification Endpoint (`/api/auth/mobile-verify`)

**Current Issue**: May not exist or not properly handle JWT verification.

**Required Implementation**:

```javascript
// POST /api/auth/mobile-verify
app.post('/api/auth/mobile-verify', async (req, res) => {
  try {
    const { token } = req.body;
    
    if (!token) {
      return res.status(400).json({ 
        success: false, 
        error: 'No token provided' 
      });
    }
    
    // Verify JWT token
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    
    // Get user data from database
    const user = await getUserById(decoded.userId);
    
    if (!user) {
      return res.status(401).json({ 
        success: false, 
        error: 'User not found' 
      });
    }
    
    console.log('✅ Token verified for user:', user.email);
    
    res.json({
      success: true,
      user: {
        id: user.id,
        email: user.email,
        firstName: user.firstName,
        lastName: user.lastName,
        avatar: user.avatar,
        // Add any other user fields you need
      }
    });
    
  } catch (error) {
    console.error('❌ Token verification error:', error);
    res.status(401).json({ 
      success: false, 
      error: 'Invalid token' 
    });
  }
});
```

### 4. Update OAuth Callback Handler

**Current Issue**: Doesn't properly handle different callback URLs for mobile vs web.

**Required Implementation**:

```javascript
// Handle OAuth callback from Replit
app.get('/api/auth/callback', async (req, res) => {
  try {
    const { code, state } = req.query;
    
    if (!code) {
      return res.status(400).send('No authorization code received');
    }
    
    // Exchange code for access token
    const tokenResponse = await fetch('https://replit.com/oauth/token', {
      method: 'POST',
      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
      body: new URLSearchParams({
        client_id: process.env.REPLIT_CLIENT_ID,
        client_secret: process.env.REPLIT_CLIENT_SECRET,
        code: code,
        grant_type: 'authorization_code'
      })
    });
    
    const tokenData = await tokenResponse.json();
    
    if (!tokenData.access_token) {
      throw new Error('No access token received');
    }
    
    // Get user info from Replit
    const userResponse = await fetch('https://replit.com/oauth/userinfo', {
      headers: { 'Authorization': `Bearer ${tokenData.access_token}` }
    });
    
    const userData = await userResponse.json();
    
    // Create or update user in your database
    const user = await createOrUpdateUser({
      replitId: userData.id,
      email: userData.email,
      firstName: userData.firstName,
      lastName: userData.lastName,
      avatar: userData.avatar
    });
    
    // Generate JWT token
    const jwtToken = jwt.sign(
      { userId: user.id, email: user.email },
      process.env.JWT_SECRET,
      { expiresIn: '7d' }
    );
    
    // Determine redirect URL based on referer or state
    const referer = req.get('Referer') || '';
    const stateData = state ? JSON.parse(decodeURIComponent(state)) : {};
    
    let redirectUrl;
    
    if (referer.includes('ascended://') || stateData.platform === 'native') {
      // Mobile app - redirect to deep link
      redirectUrl = `ascended://auth/callback?token=${jwtToken}`;
    } else if (referer.includes('replit.dev')) {
      // Web app on Replit dev domain
      redirectUrl = `https://095b9124-ae0d-4cdf-a44b-bdc917e288fa-00-1yfsp5ge10rpv.picard.replit.dev/auth/callback?token=${jwtToken}`;
    } else if (referer.includes('ascended.social')) {
      // Web app on production domain
      redirectUrl = `https://ascended.social/auth/callback?token=${jwtToken}`;
    } else {
      // Default fallback
      redirectUrl = `ascended://auth/callback?token=${jwtToken}`;
    }
    
    console.log('🔄 OAuth callback redirect:', {
      referer,
      stateData,
      redirectUrl
    });
    
    res.redirect(redirectUrl);
    
  } catch (error) {
    console.error('❌ OAuth callback error:', error);
    
    // Redirect to error page
    const errorUrl = `ascended://auth/callback?error=${encodeURIComponent(error.message)}`;
    res.redirect(errorUrl);
  }
});
```

### 5. Environment Variables Required

Add these to your backend `.env` file:

```env
# Replit OAuth
REPLIT_CLIENT_ID=your_replit_client_id
REPLIT_CLIENT_SECRET=your_replit_client_secret

# JWT
JWT_SECRET=your_jwt_secret_key

# Domains
BACKEND_DOMAIN=your-backend-domain.replit.dev
WEB_APP_DOMAIN=ascended.social
MOBILE_APP_DOMAIN=https://095b9124-ae0d-4cdf-a44b-bdc917e288fa-00-1yfsp5ge10rpv.picard.replit.dev

# Database
DATABASE_URL=your_database_url
```

### 6. Database Schema

Ensure you have a users table with these fields:

```sql
CREATE TABLE users (
  id SERIAL PRIMARY KEY,
  replit_id VARCHAR(255) UNIQUE,
  email VARCHAR(255) UNIQUE,
  first_name VARCHAR(255),
  last_name VARCHAR(255),
  avatar VARCHAR(500),
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW()
);
```

### 7. Helper Functions

Add these helper functions to your backend:

```javascript
// Create or update user
async function createOrUpdateUser(userData) {
  const { replitId, email, firstName, lastName, avatar } = userData;
  
  const existingUser = await db.query(
    'SELECT * FROM users WHERE replit_id = $1 OR email = $2',
    [replitId, email]
  );
  
  if (existingUser.rows.length > 0) {
    // Update existing user
    const result = await db.query(
      'UPDATE users SET first_name = $1, last_name = $2, avatar = $3, updated_at = NOW() WHERE id = $4 RETURNING *',
      [firstName, lastName, avatar, existingUser.rows[0].id]
    );
    return result.rows[0];
  } else {
    // Create new user
    const result = await db.query(
      'INSERT INTO users (replit_id, email, first_name, last_name, avatar) VALUES ($1, $2, $3, $4, $5) RETURNING *',
      [replitId, email, firstName, lastName, avatar]
    );
    return result.rows[0];
  }
}

// Get user by ID
async function getUserById(userId) {
  const result = await db.query('SELECT * FROM users WHERE id = $1', [userId]);
  return result.rows[0];
}
```

## Testing Flow

### Mobile App Testing (Replit Dev Domain)
1. User clicks "Sign in with Replit" in mobile app
2. App calls `/api/auth/mobile-login?platform=native&redirect_uri=ascended://auth/callback`
3. Backend redirects to Replit OAuth with `ascended://auth/callback` as callback
4. User authenticates with Replit
5. Replit redirects to `/api/auth/callback`
6. Backend processes OAuth, creates JWT, redirects to `ascended://auth/callback?token=JWT`
7. Mobile app receives deep link, processes token, user is logged in

### Web App Testing (Replit Dev Domain)
1. User clicks "Sign in with Replit" in web app
2. App calls `/api/auth/mobile-login?platform=web&redirect_uri=https://095b9124-ae0d-4cdf-a44b-bdc917e288fa-00-1yfsp5ge10rpv.picard.replit.dev`
3. Backend redirects to Replit OAuth with web callback
4. User authenticates with Replit
5. Replit redirects to `/api/auth/callback`
6. Backend processes OAuth, creates JWT, redirects to web app callback
7. Web app processes token, user is logged in

### Production Web App (ascended.social)
1. User clicks "Sign in with Replit" in production web app
2. App calls `/api/auth/mobile-login?platform=web&redirect_uri=https://ascended.social`
3. Backend redirects to Replit OAuth with production callback
4. User authenticates with Replit
5. Replit redirects to `/api/auth/callback`
6. Backend processes OAuth, creates JWT, redirects to production web app
7. Production web app processes token, user is logged in

## Expected Results

After implementing these changes:

✅ **Mobile app** (Replit dev domain) → Deep link callback → Mobile app dashboard
✅ **Web app** (Replit dev domain) → Web callback → Web app dashboard  
✅ **Production web app** (ascended.social) → Production callback → Production web app
✅ **Proper platform detection** based on referer and state
✅ **JWT token verification** working for all platforms
✅ **Mobile config endpoint** providing dynamic configuration
✅ **Error handling** with proper redirects

This setup allows you to:
- Test mobile features on the Replit dev domain
- Build and preview the mobile app as a PWA
- Deploy the web app to production with proper authentication
- Have users download the mobile app from the web app
- Maintain separate authentication flows for each platform
